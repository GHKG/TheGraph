// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ESGBatchMinted extends ethereum.Event {
  get params(): ESGBatchMinted__Params {
    return new ESGBatchMinted__Params(this);
  }
}

export class ESGBatchMinted__Params {
  _event: ESGBatchMinted;

  constructor(event: ESGBatchMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RECCanceled extends ethereum.Event {
  get params(): RECCanceled__Params {
    return new RECCanceled__Params(this);
  }
}

export class RECCanceled__Params {
  _event: RECCanceled;

  constructor(event: RECCanceled) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RECCertified extends ethereum.Event {
  get params(): RECCertified__Params {
    return new RECCertified__Params(this);
  }
}

export class RECCertified__Params {
  _event: RECCertified;

  constructor(event: RECCertified) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RECDataUpdated extends ethereum.Event {
  get params(): RECDataUpdated__Params {
    return new RECDataUpdated__Params(this);
  }
}

export class RECDataUpdated__Params {
  _event: RECDataUpdated;

  constructor(event: RECDataUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RECLiquidized extends ethereum.Event {
  get params(): RECLiquidized__Params {
    return new RECLiquidized__Params(this);
  }
}

export class RECLiquidized__Params {
  _event: RECLiquidized;

  constructor(event: RECLiquidized) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountREC(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RECRejected extends ethereum.Event {
  get params(): RECRejected__Params {
    return new RECRejected__Params(this);
  }
}

export class RECRejected__Params {
  _event: RECRejected;

  constructor(event: RECRejected) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RECRequested extends ethereum.Event {
  get params(): RECRequested__Params {
    return new RECRequested__Params(this);
  }
}

export class RECRequested__Params {
  _event: RECRequested;

  constructor(event: RECRequested) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedeemFinished extends ethereum.Event {
  get params(): RedeemFinished__Params {
    return new RedeemFinished__Params(this);
  }
}

export class RedeemFinished__Params {
  _event: RedeemFinished;

  constructor(event: RedeemFinished) {
    this._event = event;
  }

  get redeemEntity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offsetActionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ESGBatchDataUpdated extends ethereum.Event {
  get params(): ESGBatchDataUpdated__Params {
    return new ESGBatchDataUpdated__Params(this);
  }
}

export class ESGBatchDataUpdated__Params {
  _event: ESGBatchDataUpdated;

  constructor(event: ESGBatchDataUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArkreenRECIssuance__allPayInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class ArkreenRECIssuance__getRECDataResultValue0Struct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get serialNumber(): string {
    return this[1].toString();
  }

  get minter(): Address {
    return this[2].toAddress();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }

  get amountREC(): BigInt {
    return this[5].toBigInt();
  }

  get status(): i32 {
    return this[6].toI32();
  }

  get cID(): string {
    return this[7].toString();
  }

  get region(): string {
    return this[8].toString();
  }

  get url(): string {
    return this[9].toString();
  }

  get memo(): string {
    return this[10].toString();
  }

  get idAsset(): i32 {
    return this[11].toI32();
  }
}

export class ArkreenRECIssuance__getRECDataCoreResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: i32;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getIssuer(): Address {
    return this.value0;
  }

  getAmountREC(): BigInt {
    return this.value1;
  }

  getStatus(): i32 {
    return this.value2;
  }

  getIdAsset(): i32 {
    return this.value3;
  }
}

export class ArkreenRECIssuance__mintRECRequestInputRecRequestStruct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get amountREC(): BigInt {
    return this[3].toBigInt();
  }

  get cID(): string {
    return this[4].toString();
  }

  get region(): string {
    return this[5].toString();
  }

  get url(): string {
    return this[6].toString();
  }

  get memo(): string {
    return this[7].toString();
  }
}

export class ArkreenRECIssuance__mintRECRequestInputPermitToPayStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class ArkreenRECIssuance extends ethereum.SmartContract {
  static bind(address: Address): ArkreenRECIssuance {
    return new ArkreenRECIssuance("ArkreenRECIssuance", address);
  }

  AllMVPEntity(param0: Address): boolean {
    let result = super.call("AllMVPEntity", "AllMVPEntity(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_AllMVPEntity(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("AllMVPEntity", "AllMVPEntity(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SYMBOL(): string {
    let result = super.call("SYMBOL", "SYMBOL():(string)", []);

    return result[0].toString();
  }

  try_SYMBOL(): ethereum.CallResult<string> {
    let result = super.tryCall("SYMBOL", "SYMBOL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  allPayInfo(param0: BigInt): ArkreenRECIssuance__allPayInfoResult {
    let result = super.call(
      "allPayInfo",
      "allPayInfo(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ArkreenRECIssuance__allPayInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_allPayInfo(
    param0: BigInt
  ): ethereum.CallResult<ArkreenRECIssuance__allPayInfoResult> {
    let result = super.tryCall(
      "allPayInfo",
      "allPayInfo(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArkreenRECIssuance__allPayInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  allRECByIssuer(param0: Address): BigInt {
    let result = super.call(
      "allRECByIssuer",
      "allRECByIssuer(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_allRECByIssuer(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allRECByIssuer",
      "allRECByIssuer(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allRECIssued(): BigInt {
    let result = super.call("allRECIssued", "allRECIssued():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allRECIssued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allRECIssued", "allRECIssued():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allRECLiquidized(): BigInt {
    let result = super.call(
      "allRECLiquidized",
      "allRECLiquidized():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allRECLiquidized(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allRECLiquidized",
      "allRECLiquidized():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allRECRedeemed(): BigInt {
    let result = super.call("allRECRedeemed", "allRECRedeemed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allRECRedeemed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allRECRedeemed",
      "allRECRedeemed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  arkreenRegistry(): Address {
    let result = super.call(
      "arkreenRegistry",
      "arkreenRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_arkreenRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "arkreenRegistry",
      "arkreenRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRECData(
    tokenId: BigInt
  ): ArkreenRECIssuance__getRECDataResultValue0Struct {
    let result = super.call(
      "getRECData",
      "getRECData(uint256):((address,string,address,uint32,uint32,uint128,uint8,string,string,string,string,uint16))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<ArkreenRECIssuance__getRECDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getRECData(
    tokenId: BigInt
  ): ethereum.CallResult<ArkreenRECIssuance__getRECDataResultValue0Struct> {
    let result = super.tryCall(
      "getRECData",
      "getRECData(uint256):((address,string,address,uint32,uint32,uint128,uint8,string,string,string,string,uint16))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArkreenRECIssuance__getRECDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getRECDataCore(tokenId: BigInt): ArkreenRECIssuance__getRECDataCoreResult {
    let result = super.call(
      "getRECDataCore",
      "getRECDataCore(uint256):(address,uint128,uint8,uint16)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new ArkreenRECIssuance__getRECDataCoreResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32()
    );
  }

  try_getRECDataCore(
    tokenId: BigInt
  ): ethereum.CallResult<ArkreenRECIssuance__getRECDataCoreResult> {
    let result = super.tryCall(
      "getRECDataCore",
      "getRECDataCore(uint256):(address,uint128,uint8,uint16)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArkreenRECIssuance__getRECDataCoreResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintRECRequest(
    recRequest: ArkreenRECIssuance__mintRECRequestInputRecRequestStruct,
    permitToPay: ArkreenRECIssuance__mintRECRequestInputPermitToPayStruct
  ): BigInt {
    let result = super.call(
      "mintRECRequest",
      "mintRECRequest((address,uint32,uint32,uint128,string,string,string,string),(address,uint256,uint256,uint8,bytes32,bytes32)):(uint256)",
      [
        ethereum.Value.fromTuple(recRequest),
        ethereum.Value.fromTuple(permitToPay)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintRECRequest(
    recRequest: ArkreenRECIssuance__mintRECRequestInputRecRequestStruct,
    permitToPay: ArkreenRECIssuance__mintRECRequestInputPermitToPayStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintRECRequest",
      "mintRECRequest((address,uint32,uint32,uint128,string,string,string,string),(address,uint256,uint256,uint8,bytes32,bytes32)):(uint256)",
      [
        ethereum.Value.fromTuple(recRequest),
        ethereum.Value.fromTuple(permitToPay)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentByIssuer(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "paymentByIssuer",
      "paymentByIssuer(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_paymentByIssuer(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentByIssuer",
      "paymentByIssuer(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentTokenPrice(param0: Address): BigInt {
    let result = super.call(
      "paymentTokenPrice",
      "paymentTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_paymentTokenPrice(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentTokenPrice",
      "paymentTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentTokens(param0: BigInt): Address {
    let result = super.call(
      "paymentTokens",
      "paymentTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_paymentTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paymentTokens",
      "paymentTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  redeem(tokenId: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemFrom(account: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "redeemFrom",
      "redeemFrom(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemFrom(
    account: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemFrom",
      "redeemFrom(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  restore(tokenId: BigInt): boolean {
    let result = super.call("restore", "restore(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_restore(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("restore", "restore(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAKRE(): Address {
    let result = super.call("tokenAKRE", "tokenAKRE():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAKRE(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAKRE", "tokenAKRE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CertifyRECRequestCall extends ethereum.Call {
  get inputs(): CertifyRECRequestCall__Inputs {
    return new CertifyRECRequestCall__Inputs(this);
  }

  get outputs(): CertifyRECRequestCall__Outputs {
    return new CertifyRECRequestCall__Outputs(this);
  }
}

export class CertifyRECRequestCall__Inputs {
  _call: CertifyRECRequestCall;

  constructor(call: CertifyRECRequestCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get serialNumber(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CertifyRECRequestCall__Outputs {
  _call: CertifyRECRequestCall;

  constructor(call: CertifyRECRequestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _tokenAKRE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get arkRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidizeRECCall extends ethereum.Call {
  get inputs(): LiquidizeRECCall__Inputs {
    return new LiquidizeRECCall__Inputs(this);
  }

  get outputs(): LiquidizeRECCall__Outputs {
    return new LiquidizeRECCall__Outputs(this);
  }
}

export class LiquidizeRECCall__Inputs {
  _call: LiquidizeRECCall;

  constructor(call: LiquidizeRECCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidizeRECCall__Outputs {
  _call: LiquidizeRECCall;

  constructor(call: LiquidizeRECCall) {
    this._call = call;
  }
}

export class MintRECRequestCall extends ethereum.Call {
  get inputs(): MintRECRequestCall__Inputs {
    return new MintRECRequestCall__Inputs(this);
  }

  get outputs(): MintRECRequestCall__Outputs {
    return new MintRECRequestCall__Outputs(this);
  }
}

export class MintRECRequestCall__Inputs {
  _call: MintRECRequestCall;

  constructor(call: MintRECRequestCall) {
    this._call = call;
  }

  get recRequest(): MintRECRequestCallRecRequestStruct {
    return changetype<MintRECRequestCallRecRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get permitToPay(): MintRECRequestCallPermitToPayStruct {
    return changetype<MintRECRequestCallPermitToPayStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class MintRECRequestCall__Outputs {
  _call: MintRECRequestCall;

  constructor(call: MintRECRequestCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintRECRequestCallRecRequestStruct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get amountREC(): BigInt {
    return this[3].toBigInt();
  }

  get cID(): string {
    return this[4].toString();
  }

  get region(): string {
    return this[5].toString();
  }

  get url(): string {
    return this[6].toString();
  }

  get memo(): string {
    return this[7].toString();
  }
}

export class MintRECRequestCallPermitToPayStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class PostUpdateCall extends ethereum.Call {
  get inputs(): PostUpdateCall__Inputs {
    return new PostUpdateCall__Inputs(this);
  }

  get outputs(): PostUpdateCall__Outputs {
    return new PostUpdateCall__Outputs(this);
  }
}

export class PostUpdateCall__Inputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }
}

export class PostUpdateCall__Outputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get offsetActionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAndMintCertificateCall extends ethereum.Call {
  get inputs(): RedeemAndMintCertificateCall__Inputs {
    return new RedeemAndMintCertificateCall__Inputs(this);
  }

  get outputs(): RedeemAndMintCertificateCall__Outputs {
    return new RedeemAndMintCertificateCall__Outputs(this);
  }
}

export class RedeemAndMintCertificateCall__Inputs {
  _call: RedeemAndMintCertificateCall;

  constructor(call: RedeemAndMintCertificateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offsetEntityID(): string {
    return this._call.inputValues[2].value.toString();
  }

  get beneficiaryID(): string {
    return this._call.inputValues[3].value.toString();
  }

  get offsetMessage(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class RedeemAndMintCertificateCall__Outputs {
  _call: RedeemAndMintCertificateCall;

  constructor(call: RedeemAndMintCertificateCall) {
    this._call = call;
  }
}

export class RedeemFromCall extends ethereum.Call {
  get inputs(): RedeemFromCall__Inputs {
    return new RedeemFromCall__Inputs(this);
  }

  get outputs(): RedeemFromCall__Outputs {
    return new RedeemFromCall__Outputs(this);
  }
}

export class RedeemFromCall__Inputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemFromCall__Outputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }

  get offsetActionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RejectRECRequestCall extends ethereum.Call {
  get inputs(): RejectRECRequestCall__Inputs {
    return new RejectRECRequestCall__Inputs(this);
  }

  get outputs(): RejectRECRequestCall__Outputs {
    return new RejectRECRequestCall__Outputs(this);
  }
}

export class RejectRECRequestCall__Inputs {
  _call: RejectRECRequestCall;

  constructor(call: RejectRECRequestCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RejectRECRequestCall__Outputs {
  _call: RejectRECRequestCall;

  constructor(call: RejectRECRequestCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RestoreCall extends ethereum.Call {
  get inputs(): RestoreCall__Inputs {
    return new RestoreCall__Inputs(this);
  }

  get outputs(): RestoreCall__Outputs {
    return new RestoreCall__Outputs(this);
  }
}

export class RestoreCall__Inputs {
  _call: RestoreCall;

  constructor(call: RestoreCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RestoreCall__Outputs {
  _call: RestoreCall;

  constructor(call: RestoreCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetESGExtAddressCall extends ethereum.Call {
  get inputs(): SetESGExtAddressCall__Inputs {
    return new SetESGExtAddressCall__Inputs(this);
  }

  get outputs(): SetESGExtAddressCall__Outputs {
    return new SetESGExtAddressCall__Outputs(this);
  }
}

export class SetESGExtAddressCall__Inputs {
  _call: SetESGExtAddressCall;

  constructor(call: SetESGExtAddressCall) {
    this._call = call;
  }

  get addrESGExt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetESGExtAddressCall__Outputs {
  _call: SetESGExtAddressCall;

  constructor(call: SetESGExtAddressCall) {
    this._call = call;
  }
}

export class SetTokenAKRECall extends ethereum.Call {
  get inputs(): SetTokenAKRECall__Inputs {
    return new SetTokenAKRECall__Inputs(this);
  }

  get outputs(): SetTokenAKRECall__Outputs {
    return new SetTokenAKRECall__Outputs(this);
  }
}

export class SetTokenAKRECall__Inputs {
  _call: SetTokenAKRECall;

  constructor(call: SetTokenAKRECall) {
    this._call = call;
  }

  get _tokenAKRE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenAKRECall__Outputs {
  _call: SetTokenAKRECall;

  constructor(call: SetTokenAKRECall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateARECMintPriceCall extends ethereum.Call {
  get inputs(): UpdateARECMintPriceCall__Inputs {
    return new UpdateARECMintPriceCall__Inputs(this);
  }

  get outputs(): UpdateARECMintPriceCall__Outputs {
    return new UpdateARECMintPriceCall__Outputs(this);
  }
}

export class UpdateARECMintPriceCall__Inputs {
  _call: UpdateARECMintPriceCall;

  constructor(call: UpdateARECMintPriceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateARECMintPriceCall__Outputs {
  _call: UpdateARECMintPriceCall;

  constructor(call: UpdateARECMintPriceCall) {
    this._call = call;
  }
}

export class UpdateRECDataCall extends ethereum.Call {
  get inputs(): UpdateRECDataCall__Inputs {
    return new UpdateRECDataCall__Inputs(this);
  }

  get outputs(): UpdateRECDataCall__Outputs {
    return new UpdateRECDataCall__Outputs(this);
  }
}

export class UpdateRECDataCall__Inputs {
  _call: UpdateRECDataCall;

  constructor(call: UpdateRECDataCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get issuer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get region(): string {
    return this._call.inputValues[2].value.toString();
  }

  get url(): string {
    return this._call.inputValues[3].value.toString();
  }

  get memo(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class UpdateRECDataCall__Outputs {
  _call: UpdateRECDataCall;

  constructor(call: UpdateRECDataCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
