// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MinerOnboarded extends ethereum.Event {
  get params(): MinerOnboarded__Params {
    return new MinerOnboarded__Params(this);
  }
}

export class MinerOnboarded__Params {
  _event: MinerOnboarded;

  constructor(event: MinerOnboarded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get miner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoteMinersInBatch extends ethereum.Event {
  get params(): RemoteMinersInBatch__Params {
    return new RemoteMinersInBatch__Params(this);
  }
}

export class RemoteMinersInBatch__Params {
  _event: RemoteMinersInBatch;

  constructor(event: RemoteMinersInBatch) {
    this._event = event;
  }

  get owners(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get miners(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class StandardMinerOnboarded extends ethereum.Event {
  get params(): StandardMinerOnboarded__Params {
    return new StandardMinerOnboarded__Params(this);
  }
}

export class StandardMinerOnboarded__Params {
  _event: StandardMinerOnboarded;

  constructor(event: StandardMinerOnboarded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get miner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArkreenMiner__AllMinerInfoResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: BigInt;

  constructor(value0: Address, value1: i32, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getMAddress(): Address {
    return this.value0;
  }

  getMType(): i32 {
    return this.value1;
  }

  getMStatus(): i32 {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }
}

export class ArkreenMiner__GetMinerInfoResultMinerStruct extends ethereum.Tuple {
  get mAddress(): Address {
    return this[0].toAddress();
  }

  get mType(): i32 {
    return this[1].toI32();
  }

  get mStatus(): i32 {
    return this[2].toI32();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class ArkreenMiner__GetMinerInfoResult {
  value0: Address;
  value1: ArkreenMiner__GetMinerInfoResultMinerStruct;

  constructor(
    value0: Address,
    value1: ArkreenMiner__GetMinerInfoResultMinerStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getMiner(): ArkreenMiner__GetMinerInfoResultMinerStruct {
    return this.value1;
  }
}

export class ArkreenMiner extends ethereum.SmartContract {
  static bind(address: Address): ArkreenMiner {
    return new ArkreenMiner("ArkreenMiner", address);
  }

  AllManagers(param0: BigInt): Address {
    let result = super.call("AllManagers", "AllManagers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_AllManagers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AllManagers",
      "AllManagers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AllManufactures(param0: Address): boolean {
    let result = super.call(
      "AllManufactures",
      "AllManufactures(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_AllManufactures(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "AllManufactures",
      "AllManufactures(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  AllMinerInfo(param0: BigInt): ArkreenMiner__AllMinerInfoResult {
    let result = super.call(
      "AllMinerInfo",
      "AllMinerInfo(uint256):(address,uint8,uint8,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ArkreenMiner__AllMinerInfoResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_AllMinerInfo(
    param0: BigInt
  ): ethereum.CallResult<ArkreenMiner__AllMinerInfoResult> {
    let result = super.tryCall(
      "AllMinerInfo",
      "AllMinerInfo(uint256):(address,uint8,uint8,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArkreenMiner__AllMinerInfoResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  AllMinersToken(param0: Address): BigInt {
    let result = super.call(
      "AllMinersToken",
      "AllMinersToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_AllMinersToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AllMinersToken",
      "AllMinersToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GetMinerInfo(addrMiner: Address): ArkreenMiner__GetMinerInfoResult {
    let result = super.call(
      "GetMinerInfo",
      "GetMinerInfo(address):(address,(address,uint8,uint8,uint32))",
      [ethereum.Value.fromAddress(addrMiner)]
    );

    return new ArkreenMiner__GetMinerInfoResult(
      result[0].toAddress(),
      changetype<ArkreenMiner__GetMinerInfoResultMinerStruct>(
        result[1].toTuple()
      )
    );
  }

  try_GetMinerInfo(
    addrMiner: Address
  ): ethereum.CallResult<ArkreenMiner__GetMinerInfoResult> {
    let result = super.tryCall(
      "GetMinerInfo",
      "GetMinerInfo(address):(address,(address,uint8,uint8,uint32))",
      [ethereum.Value.fromAddress(addrMiner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArkreenMiner__GetMinerInfoResult(
        value[0].toAddress(),
        changetype<ArkreenMiner__GetMinerInfoResultMinerStruct>(
          value[1].toTuple()
        )
      )
    );
  }

  GetMinersAddr(owner: Address): Array<Address> {
    let result = super.call(
      "GetMinersAddr",
      "GetMinersAddr(address):(address[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toAddressArray();
  }

  try_GetMinersAddr(owner: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "GetMinersAddr",
      "GetMinersAddr(address):(address[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  REMOTE_MINER_TYPEHASH(): Bytes {
    let result = super.call(
      "REMOTE_MINER_TYPEHASH",
      "REMOTE_MINER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REMOTE_MINER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REMOTE_MINER_TYPEHASH",
      "REMOTE_MINER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STANDARD_MINER_TYPEHASH(): Bytes {
    let result = super.call(
      "STANDARD_MINER_TYPEHASH",
      "STANDARD_MINER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_STANDARD_MINER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STANDARD_MINER_TYPEHASH",
      "STANDARD_MINER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SYMBOL(): string {
    let result = super.call("SYMBOL", "SYMBOL():(string)", []);

    return result[0].toString();
  }

  try_SYMBOL(): ethereum.CallResult<string> {
    let result = super.tryCall("SYMBOL", "SYMBOL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(owner: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAKRE(): Address {
    let result = super.call("tokenAKRE", "tokenAKRE():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAKRE(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAKRE", "tokenAKRE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenNative(): Address {
    let result = super.call("tokenNative", "tokenNative():(address)", []);

    return result[0].toAddress();
  }

  try_tokenNative(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenNative", "tokenNative():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalStandardMiner(): BigInt {
    let result = super.call(
      "totalStandardMiner",
      "totalStandardMiner():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStandardMiner(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStandardMiner",
      "totalStandardMiner():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whiteListMiner(param0: Address): i32 {
    let result = super.call(
      "whiteListMiner",
      "whiteListMiner(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_whiteListMiner(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "whiteListMiner",
      "whiteListMiner(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ManageManufacturesCall extends ethereum.Call {
  get inputs(): ManageManufacturesCall__Inputs {
    return new ManageManufacturesCall__Inputs(this);
  }

  get outputs(): ManageManufacturesCall__Outputs {
    return new ManageManufacturesCall__Outputs(this);
  }
}

export class ManageManufacturesCall__Inputs {
  _call: ManageManufacturesCall;

  constructor(call: ManageManufacturesCall) {
    this._call = call;
  }

  get manufactures(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get yesOrNo(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ManageManufacturesCall__Outputs {
  _call: ManageManufacturesCall;

  constructor(call: ManageManufacturesCall) {
    this._call = call;
  }
}

export class RemoteMinerOnboardCall extends ethereum.Call {
  get inputs(): RemoteMinerOnboardCall__Inputs {
    return new RemoteMinerOnboardCall__Inputs(this);
  }

  get outputs(): RemoteMinerOnboardCall__Outputs {
    return new RemoteMinerOnboardCall__Outputs(this);
  }
}

export class RemoteMinerOnboardCall__Inputs {
  _call: RemoteMinerOnboardCall;

  constructor(call: RemoteMinerOnboardCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get miner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get permitMiner(): RemoteMinerOnboardCallPermitMinerStruct {
    return changetype<RemoteMinerOnboardCallPermitMinerStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get permitToPay(): RemoteMinerOnboardCallPermitToPayStruct {
    return changetype<RemoteMinerOnboardCallPermitToPayStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class RemoteMinerOnboardCall__Outputs {
  _call: RemoteMinerOnboardCall;

  constructor(call: RemoteMinerOnboardCall) {
    this._call = call;
  }
}

export class RemoteMinerOnboardCallPermitMinerStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RemoteMinerOnboardCallPermitToPayStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class RemoteMinerOnboardApprovedCall extends ethereum.Call {
  get inputs(): RemoteMinerOnboardApprovedCall__Inputs {
    return new RemoteMinerOnboardApprovedCall__Inputs(this);
  }

  get outputs(): RemoteMinerOnboardApprovedCall__Outputs {
    return new RemoteMinerOnboardApprovedCall__Outputs(this);
  }
}

export class RemoteMinerOnboardApprovedCall__Inputs {
  _call: RemoteMinerOnboardApprovedCall;

  constructor(call: RemoteMinerOnboardApprovedCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get miner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get permitMiner(): RemoteMinerOnboardApprovedCallPermitMinerStruct {
    return changetype<RemoteMinerOnboardApprovedCallPermitMinerStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class RemoteMinerOnboardApprovedCall__Outputs {
  _call: RemoteMinerOnboardApprovedCall;

  constructor(call: RemoteMinerOnboardApprovedCall) {
    this._call = call;
  }
}

export class RemoteMinerOnboardApprovedCallPermitMinerStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class RemoteMinerOnboardInBatchCall extends ethereum.Call {
  get inputs(): RemoteMinerOnboardInBatchCall__Inputs {
    return new RemoteMinerOnboardInBatchCall__Inputs(this);
  }

  get outputs(): RemoteMinerOnboardInBatchCall__Outputs {
    return new RemoteMinerOnboardInBatchCall__Outputs(this);
  }
}

export class RemoteMinerOnboardInBatchCall__Inputs {
  _call: RemoteMinerOnboardInBatchCall;

  constructor(call: RemoteMinerOnboardInBatchCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get miners(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RemoteMinerOnboardInBatchCall__Outputs {
  _call: RemoteMinerOnboardInBatchCall;

  constructor(call: RemoteMinerOnboardInBatchCall) {
    this._call = call;
  }
}

export class RemoteMinerOnboardNativeCall extends ethereum.Call {
  get inputs(): RemoteMinerOnboardNativeCall__Inputs {
    return new RemoteMinerOnboardNativeCall__Inputs(this);
  }

  get outputs(): RemoteMinerOnboardNativeCall__Outputs {
    return new RemoteMinerOnboardNativeCall__Outputs(this);
  }
}

export class RemoteMinerOnboardNativeCall__Inputs {
  _call: RemoteMinerOnboardNativeCall;

  constructor(call: RemoteMinerOnboardNativeCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get miner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get permitMiner(): RemoteMinerOnboardNativeCallPermitMinerStruct {
    return changetype<RemoteMinerOnboardNativeCallPermitMinerStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class RemoteMinerOnboardNativeCall__Outputs {
  _call: RemoteMinerOnboardNativeCall;

  constructor(call: RemoteMinerOnboardNativeCall) {
    this._call = call;
  }
}

export class RemoteMinerOnboardNativeCallPermitMinerStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get v(): i32 {
    return this[3].toI32();
  }

  get r(): Bytes {
    return this[4].toBytes();
  }

  get s(): Bytes {
    return this[5].toBytes();
  }
}

export class SetMinersStatusCall extends ethereum.Call {
  get inputs(): SetMinersStatusCall__Inputs {
    return new SetMinersStatusCall__Inputs(this);
  }

  get outputs(): SetMinersStatusCall__Outputs {
    return new SetMinersStatusCall__Outputs(this);
  }
}

export class SetMinersStatusCall__Inputs {
  _call: SetMinersStatusCall;

  constructor(call: SetMinersStatusCall) {
    this._call = call;
  }

  get minerID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minerStatus(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetMinersStatusCall__Outputs {
  _call: SetMinersStatusCall;

  constructor(call: SetMinersStatusCall) {
    this._call = call;
  }
}

export class StandardMinerOnboardCall extends ethereum.Call {
  get inputs(): StandardMinerOnboardCall__Inputs {
    return new StandardMinerOnboardCall__Inputs(this);
  }

  get outputs(): StandardMinerOnboardCall__Outputs {
    return new StandardMinerOnboardCall__Outputs(this);
  }
}

export class StandardMinerOnboardCall__Inputs {
  _call: StandardMinerOnboardCall;

  constructor(call: StandardMinerOnboardCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get miner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get permitMiner(): StandardMinerOnboardCallPermitMinerStruct {
    return changetype<StandardMinerOnboardCallPermitMinerStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class StandardMinerOnboardCall__Outputs {
  _call: StandardMinerOnboardCall;

  constructor(call: StandardMinerOnboardCall) {
    this._call = call;
  }
}

export class StandardMinerOnboardCallPermitMinerStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class UpdateMinerWhiteListCall extends ethereum.Call {
  get inputs(): UpdateMinerWhiteListCall__Inputs {
    return new UpdateMinerWhiteListCall__Inputs(this);
  }

  get outputs(): UpdateMinerWhiteListCall__Outputs {
    return new UpdateMinerWhiteListCall__Outputs(this);
  }
}

export class UpdateMinerWhiteListCall__Inputs {
  _call: UpdateMinerWhiteListCall;

  constructor(call: UpdateMinerWhiteListCall) {
    this._call = call;
  }

  get typeMiner(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get addressMiners(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpdateMinerWhiteListCall__Outputs {
  _call: UpdateMinerWhiteListCall;

  constructor(call: UpdateMinerWhiteListCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _tokenAKRE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenNative(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minerManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minerAuthority(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PostUpdateCall extends ethereum.Call {
  get inputs(): PostUpdateCall__Inputs {
    return new PostUpdateCall__Inputs(this);
  }

  get outputs(): PostUpdateCall__Outputs {
    return new PostUpdateCall__Outputs(this);
  }
}

export class PostUpdateCall__Inputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }
}

export class PostUpdateCall__Outputs {
  _call: PostUpdateCall;

  constructor(call: PostUpdateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get managerType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get managerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetNativeTokenCall extends ethereum.Call {
  get inputs(): SetNativeTokenCall__Inputs {
    return new SetNativeTokenCall__Inputs(this);
  }

  get outputs(): SetNativeTokenCall__Outputs {
    return new SetNativeTokenCall__Outputs(this);
  }
}

export class SetNativeTokenCall__Inputs {
  _call: SetNativeTokenCall;

  constructor(call: SetNativeTokenCall) {
    this._call = call;
  }

  get native(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNativeTokenCall__Outputs {
  _call: SetNativeTokenCall;

  constructor(call: SetNativeTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
